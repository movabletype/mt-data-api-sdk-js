module.exports = function (grunt) {
  "use strict";

  var srcHintOptionsBrowser = grunt.file.readJSON("src/.jshintrc"),
    srcHintOptionsNode = grunt.file.readJSON("src/.jshintrc"),
    srcBrowser = [
      "src/data-api/common/core.js",
      "src/data-api/common/cookie.js",
      "src/data-api/common/endpoints.js",
      "src/data-api/common/exports.js",
      "src/data-api/common/sessionstore-cookie.js",
      "src/data-api/common/sessionstore-cookie-encrypted.js"
    ],
    srcNode = srcBrowser.concat([
      "src/data-api/common/window.js",
      "src/data-api/common/sessionstore-fs.js",
      "src/node/bootstrap.js"
    ]);
  srcHintOptionsBrowser.browser = true;
  srcHintOptionsNode.node = true;

  grunt.initConfig({
    pkg: grunt.file.readJSON("package.json"),
    clean: {
      "data-api": [
        "<%= preprocess['data-api-coverage-endpoints'].dest %>",
        "<%= Object.keys(uglify['data-api-browser'].files)[0] %>",
        "<%= uglify['data-api-browser'].options.sourceMap %>",
        "<%= movabletype.options.helper %>",
      ]
    },
    preprocess: {
      "data-api-browser": {
        dest: "mt-static/data-api/v6/js/mt-data-api.js",
        src: "src/data-api/v6/mt-data-api.js"
      },
      "data-api-node": {
        dest: "node-lib/data-api/v6/node-mt-data-api.js",
        src: "src/data-api/v6/node-mt-data-api.js"
      },
      "node-bootstrap": {
        dest: "node-lib/bootstrap.js",
        src: "src/node/bootstrap.js"
      },
      "data-api-coverage-endpoints": {
        dest: ".src/data-api/coverage/endpoints.js",
        src: "src/data-api/v6/endpoints.js"
      }
    },
    uglify: {
      "data-api-browser": {
        files: {
          "mt-static/data-api/v6/js/mt-data-api.min.js": [
            "mt-static/data-api/v6/js/mt-data-api.js"
          ]
        },
        options: {
          banner: "/* Copyright (c) 2013-2019 Six Apart Ltd.\n * This file is generated by Movable Type DataAPI SDK for JavaScript.\n * Consult the source files for their respective licenses and copyrights.\n * <%= pkg.homepage %>\n */\n",
          report: "min",
          beautify: {
            ascii_only: true
          },
          compress: {
            if_return: false,
            hoist_funs: false,
            join_vars: false,
            loops: false,
            unused: false
          }
        }
      }
    },
    jshint: {
      "data-api-browser": {
        src: srcBrowser,
        options: srcHintOptionsBrowser
      },
      "data-api-node": {
        src: srcNode,
        options: srcHintOptionsNode
      },
      grunt: {
        src: [
          "Gruntfile.js",
          "tasks/test.js",
          "tasks/build.js"
        ],
        options: {
          jshintrc: ".jshintrc"
        }
      }
    },
    connect: {
      jasmine: {
        options: {
          hostname: "localhost",
          port: 9001,
          middleware: [
            function movabletypeProxy(req, res, next) {
              if (req.url.match(/^\/cgi-bin/)) {
                var proxy = require("http-proxy").createProxyServer({
                  target: {
                    host: "localhost",
                    port: grunt.config.get("movabletype.options.port")
                  }
                });
                proxy.web(req, res);
              }
              else {
                next();
              }
            }
          ],
        },
      },
    },
    jasmine: {
      "data-api": {
        src: ["mt-static/data-api/v6/js/mt-data-api.js"],
        options: {
          specs: "spec/data-api/**/*.js",
          host: "http://localhost:<%= connect.jasmine.options.port %>/",
          helpers: [
            "bower_components/sinon-browser/*.js",
            "bower_components/underscore/underscore.js",
            "bower_components/jquery/jquery.min.js",
            "bower_components/requirejs/require.js",
            "spec/helpers/common/*.js",
            "src/data-api/common/cookie.js",
          ],
          keepRunner: true,
          outfile: "spec/runner.html",
        }
      },
    },
    jasmine_node: {
      projectRoot: "spec",
      useHelpers: true,
      jUnit: {
        report: true,
        savePath: "reports/node/",
        useDotNotation: true,
        consolidate: true
      }
    },
    movabletype: {
      options: {
        port: 9002,
        helper: "spec/helpers/common/psgi-server-status-helper.js"
      }
    }
  });

  grunt.task.loadTasks("tasks");
  grunt.task.loadNpmTasks("grunt-contrib-jasmine");
  grunt.task.loadNpmTasks("grunt-contrib-jasmine-node");
  grunt.task.loadNpmTasks("grunt-contrib-jshint");
  grunt.task.loadNpmTasks("grunt-contrib-uglify");
  grunt.task.loadNpmTasks("grunt-contrib-clean");
  grunt.task.loadNpmTasks("grunt-contrib-connect");
  grunt.task.loadNpmTasks("grunt-preprocess");
};
